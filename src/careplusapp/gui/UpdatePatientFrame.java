/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package careplusapp.gui;

import careplusapp.dao.DoctorsDao;
import careplusapp.dao.PatientDao;
import careplusapp.pojo.PatientPojo;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author hardi
 */
public class UpdatePatientFrame extends javax.swing.JFrame {

    private String pId, fName, sName, date, address, city, opd;
    private int age;
    private PatientPojo pat;
    public UpdatePatientFrame() {
        UIManager.put( "TextComponent.arc", 10 );
        UIManager.put( "Component.arc", 10 );
        UIManager.put( "CheckBox.arc", 10 );
        UIManager.put( "ProgressBar.arc", 10 );
        FlatMacLightLaf.setup();
        initComponents();
        loadPatId();
        loadDoc();
        getDate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtOpd = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jcDocId = new javax.swing.JComboBox<>();
        txtCity = new javax.swing.JTextField();
        jcStatus = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jcGender = new javax.swing.JComboBox<>();
        txtDate = new javax.swing.JTextField();
        txtMno = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtSName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        AddBtn = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jcEmpId = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel13.setText("OPD");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 410, 200, 50));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setText("First Name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 200, 50));

        txtOpd.setBackground(new java.awt.Color(234, 234, 234));
        txtOpd.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtOpd, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 410, 250, 50));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel4.setText("Age");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 410, 200, 50));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel5.setText("Marial Status");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 350, 200, 50));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel7.setText("City");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 290, 200, 50));

        txtAddress.setBackground(new java.awt.Color(234, 234, 234));
        txtAddress.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 230, 250, 50));

        jLabel16.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel16.setText("DoctorId");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 110, 200, 50));

        txtAge.setBackground(new java.awt.Color(234, 234, 234));
        txtAge.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 410, 250, 50));

        jcDocId.setBackground(new java.awt.Color(234, 234, 234));
        jcDocId.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jcDocId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcDocIdActionPerformed(evt);
            }
        });
        jPanel1.add(jcDocId, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 110, 250, 50));

        txtCity.setBackground(new java.awt.Color(234, 234, 234));
        txtCity.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 290, 250, 50));

        jcStatus.setBackground(new java.awt.Color(234, 234, 234));
        jcStatus.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jcStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MARRIED", "UNMARRIED" }));
        jPanel1.add(jcStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 350, 250, 50));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("Patient Id");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 200, 50));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel9.setText("Gender");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 350, 200, 50));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel8.setText("Last Name");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 200, 50));

        jcGender.setBackground(new java.awt.Color(234, 234, 234));
        jcGender.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jcGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE", "OTHER" }));
        jPanel1.add(jcGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 250, 50));

        txtDate.setEditable(false);
        txtDate.setBackground(new java.awt.Color(234, 234, 234));
        txtDate.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 170, 250, 50));

        txtMno.setBackground(new java.awt.Color(234, 234, 234));
        txtMno.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtMno, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 290, 250, 50));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel11.setText("Phone No.");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 200, 50));

        txtSName.setBackground(new java.awt.Color(234, 234, 234));
        txtSName.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtSName, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 230, 250, 50));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel10.setText("Date");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 170, 200, 50));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setText("Address");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 230, 200, 50));

        txtFName.setBackground(new java.awt.Color(234, 234, 234));
        txtFName.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(txtFName, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 170, 250, 50));

        AddBtn.setBackground(new java.awt.Color(0, 110, 220));
        AddBtn.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        AddBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddBtn.setText("UPDATE PATIENT");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });
        jPanel1.add(AddBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 530, 350, 80));

        btnClear.setBackground(new java.awt.Color(208, 208, 208));
        btnClear.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel1.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 530, 350, 80));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 15)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/careplusapp/icons/568174 (1).png"))); // NOI18N
        jLabel1.setText("BACK");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 50));

        jcEmpId.setBackground(new java.awt.Color(242, 242, 242));
        jcEmpId.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jcEmpId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcEmpIdActionPerformed(evt);
            }
        });
        jPanel1.add(jcEmpId, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 110, 250, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1218, 727));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jcDocIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcDocIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcDocIdActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
     if(jcDocId.getSelectedItem()==null || validateInputs()==false){
        JOptionPane.showMessageDialog(null,"Please input all data");
        return;
     }
     if(isContactNoValid()==false){
        System.out.println(isContactNoValid());
        JOptionPane.showMessageDialog(null, "Invalid Mobile Number");
        return;
     }
     
         System.out.println("try block");
         PatientPojo pati = new PatientPojo();
         pati.setDoctorId(jcDocId.getSelectedItem().toString().trim().toUpperCase());
         pati.setPatientId(pId);
         pati.setFirstName(fName);
         pati.setLastName(sName);
         pati.setMno(txtMno.getText().toString());
         pati.setAddress(address);
         pati.setCity(city);
         pati.setOpd(opd);
         pati.setAge(age);
         pati.setGender(jcGender.getSelectedItem().toString().trim().toUpperCase());
         pati.setMarriedStatus(jcStatus.getSelectedItem().toString().trim().toUpperCase());
         boolean result = false;
         try {
            pati.setDate(dateConv());
            result = PatientDao.updatePatient(pati, pat.getPatientId());
        } catch (ParseException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            Logger.getLogger(UpdatePatientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
         if(result){
          JOptionPane.showMessageDialog(null, "Patient updated successfully!");
          new ReceptionistOptionsFrame().setVisible(true);
          this.dispose();
          return;
         }
         JOptionPane.showMessageDialog(null, "Could not add the record! Try Again");
    }//GEN-LAST:event_AddBtnActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        new ReceptionistOptionsFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jcEmpIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcEmpIdActionPerformed
        try{
            String empId=jcEmpId.getSelectedItem().toString();
            pat = PatientDao.getPatientDetailsbyId(empId);
            fillFields();
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null,"Error In DB"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jcEmpIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdatePatientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdatePatientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdatePatientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdatePatientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdatePatientFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton btnClear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> jcDocId;
    private javax.swing.JComboBox<String> jcEmpId;
    private javax.swing.JComboBox<String> jcGender;
    private javax.swing.JComboBox<String> jcStatus;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtMno;
    private javax.swing.JTextField txtOpd;
    private javax.swing.JTextField txtSName;
    // End of variables declaration//GEN-END:variables
 
    private void loadDocId() {
        
        try{
            List<String>docIdList=DoctorsDao.getAllDoctorId();
            if(docIdList.size()<1){
                JOptionPane.showMessageDialog(null,"No records found!","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            else{
                AddBtn.setEnabled(true);
                for(String id:docIdList){
                    jcDocId.addItem(id);
                }
            }
        }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(null,"Error In DB"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
        }
    }

    private void clear() {
        jcEmpId.setSelectedIndex(0);
        txtFName.setText("");
        txtSName.setText("");
        txtMno.setText("");
        jcGender.setSelectedIndex(0);
        txtAge.setText("");
        jcDocId.setSelectedIndex(0);
        txtDate.setText("");
        txtAddress.setText("");
        txtCity.setText("");
        jcStatus.setSelectedIndex(0);
        txtOpd.setText("");
        txtFName.requestFocus();
    }
    private boolean validateInputs() {
        fName=txtFName.getText().trim();
        sName=txtSName.getText().trim();
        date=txtDate.getText().trim();
        address=txtAddress.getText().trim();
        city=txtCity.getText().trim();
        opd=txtOpd.getText().trim();
        age=Integer.parseInt(txtAge.getText());
        if(fName.isEmpty() || sName.isEmpty() || date.isEmpty() || address.isEmpty() || city.isEmpty() || opd.isEmpty()){
            return false;   
        }
        return true;
    }

    private boolean isContactNoValid() {
        char []mob=txtMno.getText().toString().toCharArray();
        for(char ch:mob){
            if(Character.isDigit(ch)==false){
                return false;
            }
        }
        if(mob.length==10)
            return true;
        return false;
    }
    private void getDate(){
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        txtDate.setText(sdf.format(new Date()).toString());
    }
    private java.sql.Date dateConv() throws ParseException{
        java.util.Date utilDate = new java.util.Date();
        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
        return sqlDate;
    }
    private void loadPatId() {
        try{
            List<String>patIdList=PatientDao.getAllPatientId();
            if(patIdList.size()<1){
                JOptionPane.showMessageDialog(null,"No records found!","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            else{
                AddBtn.setEnabled(true);
                for(String id:patIdList){
                    jcEmpId.addItem(id);
                }
            }
        }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(null,"Error In DB"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
        }
    }
    private void loadDoc() {
        
        try{
            List<String>docIdList=DoctorsDao.getAllDoctorId();
            if(docIdList.size()<1){
                JOptionPane.showMessageDialog(null,"No records found!","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            else{
                AddBtn.setEnabled(true);
                for(String id:docIdList){
                    jcDocId.addItem(id);
                }
            }
        }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(null,"Error In DB"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
        }
    }
    private void fillFields() {
        txtFName.setText(pat.getFirstName());
        txtSName.setText(pat.getLastName());
        txtMno.setText(pat.getMno());
        jcGender.setSelectedItem(pat.getGender());
        txtAge.setText(String.valueOf(pat.getAge()));
        jcDocId.setSelectedItem(pat.getDoctorId());
        txtAddress.setText(pat.getAddress());
        txtCity.setText(pat.getCity());
        jcStatus.setSelectedItem(pat.getMarriedStatus());
        txtOpd.setText(pat.getOpd());                       
    }
}
